API :- Application Programming Interface

Manual APi :- Postman
Automation API :- requests

JSON :- Java Scripts Object Notation


Type of API :-

Rest api, SOUP API

Rest API :- Representational State Transfer API :- Programming Interface

Synatx base programming

1.Statelessness


Client ------Requets----->   Server  -Verify
       <--------Response---- status_code

2.Resources.
URL :- Uniform Resource Locators)

GET, POST, PUT, PATCH, DELETE

GET:- Retrives data from server

POST : Create a new resource on the server

PUT :- Update the existing resource or create a resource if doesnot exits.

PATCH:- If you want some partially Update , then go for patch

DELETE :- Remove a resource from the server.


Status:-
100

200 -  sucess
>>200 OK
The request succeeded. The result meaning of "success" depends on the HTTP method:

    GET: The resource has been fetched and transmitted in the message body.
    HEAD: The representation headers are included in the response without any message body.
    PUT or POST: The resource describing the result of the action is transmitted in the message body.
    TRACE: The message body contains the request message as received by the server.

>>201 Created
    The request succeeded, and a new resource was created as a result. This is typically the response sent after POST requests, or some PUT requests.

>>202 Accepted
    The request has been received but not yet acted upon. It is noncommittal, since there is no way in HTTP to later send an asynchronous response indicating the outcome of the request. It is intended for cases where another process or server handles the request, or for batch processing.

400 - Failed

>>400 Bad Request
    The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).

>>401 Unauthorized
    Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.

>>402 Payment Required Experimental
    This response code is reserved for future use. The initial aim for creating this code was using it for digital payment systems, however this status code is used very rarely and no standard convention exists.

>>403 Forbidden
    The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.

>>404 Not Found
    The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web


500 - Server Error

>>500 Internal Server Error
    The server has encountered a situation it does not know how to handle.

>>501 Not Implemented
    The request method is not supported by the server and cannot be handled. The only methods that servers are required to support (and therefore that must not return this code) are GET and HEAD.

>>502 Bad Gateway
    This error response means that the server, while working as a gateway to get a response needed to handle the request, got an invalid response.

>>503 Service Unavailable
    The server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded. Note that together with this response, a user-friendly page explaining the problem should be sent. This response should be used for temporary conditions and the Retry-After HTTP header should, if possible, contain the estimated time before the recovery of the service. The webmaster must also take care about the caching-related headers that are sent along with this response, as these temporary condition responses should usually not be cached